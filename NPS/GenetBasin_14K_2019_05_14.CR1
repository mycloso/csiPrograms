'CR1000
'GenetBasin_2019_05_14.CR1
'Program created on 4/12/2018.
'Program edited on 5/12/2018.
'Program edited on 5/31/2018.
'Program edited on 5/14/2019.
'For Genet Basin 14K Met Station. Measures AT, AT/RH, solar rad x2, w/s, w/d, and distance to snow
'
'Program measures air temperature with a CSI 107 or CSI 109 temp sensor. This is the primary AT reading.
'----
'Wiring: Red=1H, Black= EX1, Purple=G, Clear=G
'
'
'Program measures AT/RH with a CSI CS215  
'######NOTE Requires that the SDI Address be changed to "1" sharing the same port with SR50########
'----
' Wiring:
' Color Function CR200(X)
' ----- -------- -------
' Red   Power     SW12v
' Green SDI-12    signal C3
' Black Power     ground G
' White Power     ground G
' Clear Shield    Signal Ground
'
'
'Program measures solar radiation with two CS320 pyranometer sensors
'One points up at sky, one points down at snow
'Each CS320 records 6 variables: solar rad W/m^2, mV 3)sensor temp., x, y, z orientation
'----
'Wiring: CS320_Sky White=C7, Clear=G, Red=12V, Black=G, Blue=G
'Wiring: CS320_Snow White=C5, Clear=G, Red=12V, Black=G, Blue=G
'
'
'Program measures wind speed and direction with a 05108 or 05103 RM Young anemometer
'----
'Wiring: Green=1H (SE2), Red=P1, Blue=EX2, Black=G, Clear=G, White=G
'
'
'Program measures snow depth with SR50 every per hour at 59 minutes past the hour
'SR50 measures three variables:
'1) DT_Raw = Distance to surface in meters
'2) Distance_m = Distance to surface in meters after air temperature correction.
'3) SR50_Quality = Quality value of measurement
'(ranges from 152 To 600, where 600 Is the poorest quality)
'---
'Wiring:  Connect Ground first: Black=G, White=G, Clear=G, then Green=C3, Red=12V,
'
'
'Iridium Modem IMEI 300234065794630
'----
'Wiring: Yellow = C1, Grey = C2, Red (single pigtail) - C4
'Wiring (cont.) = Red 12V power, Black Ground [either on CR1000 or on charge controller]

'For telemetry send the "Telemetry" table

'Declare Variables and Units
Public BattV
Public AirTemp_F        'Air temperature measured by 107 or 109 sensor (Degree F)
Public AirTemp_C        'Air temp in C for SR50 temperature correction
Public WS_mph           'Wind Speed measured by 05103 RM Young (mph)
Public WindDir          'Wind direction measured by 05103 RM Young (degrees)
Public CS320_Sky(6)     'Solar Radiation measured by CS320. Pointing up towwards sky.
Public CS320_Snow(6)    'Solar radiation measured by CS320. Pointing down towards snow.
Public Distance_m       'Distance to surface, corrected for air temperature
Public Distance_cm      'Distance to surface in cm, corrected for air temperature
Public SR50(2)
Public TRHData(2)
Alias TRHData(1)=AirTemp215
Alias TRHData(2)=RH215

'iridium variables
Public forceMessage
Public tries                                                  ' Counter that keeps track of the number of attempts to send data (zero'd out each hour)
Public success                                                ' The variable is true when the modem is successful
Const Iridiumport = com1                                      ' This is the serail port that the iridium modem is connected to
Const Iridiumpowerport = 4                                    ' This is the port that turns the modem off and on 9=sw12
Const numvals = 9                                             ' Edit this value to change the number of data values to pull from the table
Const sendInterval = 60                                       ' Telemetry interval in minutes
Public lowPowerDelay

Alias CS320_Sky(1)=SolarRad_Sky
Alias CS320_Sky(2)=mV_Sky
Alias CS320_Sky(3)=SensTemp_Sky
Alias CS320_Sky(4)=XAxis_Sky
Alias CS320_Sky(5)=YAxis_Sky
Alias CS320_Sky(6)=ZAxis_Sky
Alias CS320_Snow(1)=SolarRad_Snow
Alias CS320_Snow(2)=mV_Snow
Alias CS320_Snow(3)=SensTemp_Snow
Alias CS320_Snow(4)=XAxis_Snow
Alias CS320_Snow(5)=YAxis_Snow
Alias CS320_Snow(6)=ZAxis_Snow
Alias SR50(1)=DT_Raw    'Distance measured by SR50 before temperature correction
Alias SR50(2)=SR50_Quality  'Quality of measurement from 152 to 600. Lower is better.

Units BattV=Volts
Units AirTemp_F=Deg F
Units AirTemp_C=Deg C
Units WS_mph=miles/hour
Units WindDir=Degrees
Units SolarRad_Sky=W m^2
Units mV_Sky=mV
Units SensTemp_Sky=Degree C
Units XAxis_Sky=Degrees
Units YAxis_Sky=Degrees
Units ZAxis_Sky=Degrees
Units SolarRad_Snow=W m^2
Units mV_Snow=mV
Units SensTemp_Snow=Degree C
Units XAxis_Snow=Degrees
Units YAxis_Snow=Degrees
Units ZAxis_Snow=Degrees
Units DT_Raw=m
Units Distance_m=m
Units Distance_cm=cm

'Define Data Tables
DataTable(Hourly,True,-1)
  DataInterval(0,60,Min,10)
  Average(1,BattV,FP2,False)
  Average(1,AirTemp_F,FP2,False)
  Average (1,AirTemp_C,FP2,False)
  Average (1,CS320_Sky(),FP2,False)
  Average (1,CS320_Snow(),FP2,False)
  Maximum(1,WS_mph,FP2,False,False)
  WindVector (1,WS_mph,WindDir,FP2,False,0,0,1)
  Average (1,Distance_m,FP2,False)
  Average (1,DT_Raw,FP2,False)
  Average (1,SR50_Quality,FP2,False)
  Average (1,AirTemp215,FP2,False)
  Average (1,RH215,FP2,False)
EndTable

'Parameters to send via telemtry each hour
DataTable (Telemetry,True,-1)
  DataInterval(0,60,Min,10)
  Average(1,BattV,FP2,False)
  Average(1,AirTemp_F,FP2,False)
  Average (1,SolarRad_Sky,FP2,False)
  WindVector (1,WS_mph,WindDir,FP2,False,0,0,1)
  Maximum (1,WS_mph,FP2,False,False)
  Average (1,Distance_cm,FP2,False)
  Average (1,RH215,FP2,False)
  Sample (1,tries,FP2)
EndTable


'\\\\\\\\\\\\\\\\\\\\\\\\\ SUBROUTINES //////////////////////////


'This subroutine converts a number to a positive integer for transfer by iridium
'i.e.  12.14 becomes  2121  (add 200 then multiply by 10)
Sub converttolong (floatval As Float, longval As Long)
  longval = FIX((floatval+200)*10)
EndSub

Sub senddatatoiridium(numberofvalues,attempts,success)
  Dim result(6)
  Dim message As String * 150
  Dim meslength
  Public localattempts
  Dim lastrecord(100)
  Dim longrecord(100) As Long
  Dim byte1 As Long
  Dim byte2 As Long
  Dim hours As Long
  Dim offset1
  Dim iridchecksum As Long
  Public debug1 As String * 30
  Public debug2 As String * 30
  Public debug3 As String * 30
  Public debug4 As String * 30
  Public debug5 As String * 30

  Dim binaryok As String * 20
  Dim modemready As Long
  Dim online As Long
  Public messageresult As String * 50
  Public numresult(2) As String * 50
  Dim j

  'Initialize iridium Variables
  offset1 = 0
  iridchecksum = 0
  message = ""
  success = 0
  localattempts = 0

  '###
  '### Get the last data record
  '###

  GetRecord(lastrecord,Telemetry,1)

  '###
  '###Get the hours since beginning of the year and insert into binary message
  '### Start calculating binary checksum value
  '###
  hours = INT((Telemetry.Timestamp(2,1))/3600)+24
  MoveBytes (message,offset1,hours,2,2)
  MoveBytes (byte1,3,hours,2,1)
  MoveBytes (byte2,3,hours,3,1)
  iridchecksum = iridchecksum + byte1+byte2
  offset1 = offset1 + 2

  '###
  '###Get the specified number of values from the last record and insert them into the binary message
  '###
  For j=1 To numberofvalues Step 1
    converttolong(lastrecord(j),longrecord(j))
    MoveBytes (message,offset1,longrecord(j),2,2)
    MoveBytes (byte1,3,longrecord(j),2,1)
    MoveBytes (byte2,3,longrecord(j),3,1)
    iridchecksum = iridchecksum + byte1+byte2
    offset1 = offset1 + 2
  Next j

  '###
  '### Add checksum to binary message
  '###
  meslength = numberofvalues*2+2
  MoveBytes (message,offset1,iridchecksum,2,2)
  offset1 = offset1 + 2

  '###
  '### Turn on modem and complete SBD session
  '###
  PortSet (Iridiumpowerport,1)
  Delay (1,3,Sec)
  SerialOpen (Iridiumport,19200,3,0,200)
  While ((success <> 1) AND (localattempts < 4))
  debug1 = ""
  debug2 = ""
  debug3 = ""
  debug4 = ""
  debug5 = ""
  SerialFlush (Iridiumport)
  messageresult = "-"
  binaryok = 0
  numresult(1) = 0
  numresult(2) = 0
  online = 0
  modemready = 0
  result() = 0
  attempts = attempts + 1
  localattempts = localattempts + 1
  modemready = SerialOut(Iridiumport, "AT+SBDWB=" + meslength+CHR(13),"READY",1,300)
  If (modemready<>0) Then
    debug1 = "Modem Ready"
    SerialOutBlock(Iridiumport,message,offset1)
    SerialIn (binaryok,Iridiumport,100,"0",5)
    If (InStr (1,binaryok,"0",2)) Then
      debug2 = "Modem Accepts Data"
      debug3 = "Waiting for Satellite"
      online = SerialOut (Iridiumport,"AT+CIER=1,0,1,0"+CHR(13),"+CIEV:1,1",1,1000)                            'Set modem config and wait for satellite connection
      If (online <> 0) Then
        debug3 = "Satellite Visible"
        debug4 = "Message Sent"
        SerialOut(Iridiumport,"AT+SBDIX"+CHR(13),"",0,0)
        SerialIn(messageresult,Iridiumport,4000,0,30)
        SplitStr(numresult,messageresult,":",2,5)
        SplitStr(result,numresult(2),",",6,5)
        If (result(1) < 5) Then
          debug5 = "Delivery confirmed by Satellite"
          success = 1
        Else
          debug4 = "Message Failed"
        EndIf
      Else
        debug3 = "No satellite Connection"
      EndIf
    Else
      debug2 = "Data not accepted by modem"
    EndIf
  Else
    debug1 = "Modem Not Ready"
  EndIf

Wend
If (success = 0) Then
  debug5 = "Message Not Delivered"
EndIf
SerialOut(Iridiumport,"AT+SBDD0"+CHR(13),"",0,100)
SerialFlush (Iridiumport)
SerialClose(Iridiumport)
PortSet(Iridiumpowerport,0)
EndSub


'\\\\\\\\\\\\\\\\\\\\\\\\\\\ PROGRAM ////////////////////////////


'Main Program executes every 60 seconds
BeginProg
  Scan(60,Sec,1,0)
    'Default Datalogger Battery Voltage measurement BattV
    Battery(BattV)
    '107 or 109 Temperature Probe measurement T107_F, log temperature as deg C for SR50 correction
    Therm109 (AirTemp_F,1,1,Vx1,0,250,1.8,32)
    'Therm107(AirTemp_F,1,1,1,0,_60Hz,1.8,32)
    AirTemp_C=(AirTemp_F-32)/1.8
    '05103 or 05108 Wind Speed & Direction Sensor measurements WS_mph and WindDir
    'PulseCount(WS_mph,1,1,1,1,0.2192,0)        'Multiplier is 0.2192 for mph for 05103.
    'Uncomment next line if 05108 is used, and comment out the line above.
    PulseCount(WS_mph,1,1,1,1,0.3726,0)          'Multiplier is 0.3726 for mph for 05108.
    BrHalf(WindDir,1,mV2500,2,2,1,2500,True,0,_60Hz,355,0)
    If WindDir>=360 Then WindDir=0
    'CS320 Sky SDI12 sensor measurements for CS320 pointing toward sky
    ' M!4 = Measures SolarRad, mV, SensTemp, XAxis, YAxis,ZAxis
    SDI12Recorder(CS320_Sky(),7,"0","M4!",1,0)
    'CS320 Snow SDI12 sensor measurements for CS320 pointing toward snow
    ' M!4 = Measures SolarRad, mV, SensTemp, XAxis, YAxis,ZAxis
    SDI12Recorder (CS320_Snow(),5,"0","M4!",1.0,0)
    If SolarRad_Sky  < 0 Then SolarRad_Sky = 0    'Removes negative values from CS320 sky
    If SolarRad_Snow < 0 Then SolarRad_Snow = 0  'Removes negative values from CS320 snow
    'SR50 Sonic Ranging Sensor (SDI-12 Output) measurements 'DT_raw', 'Distance_TC'
    If TimeIntoInterval (59,60,min)Then
      SDI12Recorder(SR50(),3,"0","M1!",1,0)
      Distance_m=DT_Raw*SQR((AirTemp_C+273.15)/273.15)
      Distance_cm = Distance_m*100
    EndIf
    'CS215 Temperature & Relative Humidity Sensor measurements 'AirTC' (F) and 'RH'
    SDI12Recorder(TRHData(),3,"1","M!",1,0)
    AirTemp215 = (AirTemp215 * (9/5)) + 32
    If RH215 >100 AND RH215 < 108 Then RH215 = 100


    'Call Data Table and Store Data
    CallTable Hourly
    'Call Telemetry table to send hourly data via iridium
    CallTable (Telemetry)
    'Add telemetry instructions
  NextScan

SlowSequence
Scan (1,min,0,0)
  debug1 = ""
  debug2 = ""
  debug3 = ""
  debug4 = ""

  'Add a delay multiplier for low battery voltage
  lowPowerDelay = 1
  If BattV < 12.3 Then
    lowPowerDelay = 6
  EndIf
  If BattV < 12.0 Then
    lowPowerDelay = 24
  EndIf

  'Manual force a message by setting forceMessage = 1 via the keypad
  If forceMessage = 1 Then
    Call senddatatoiridium(numvals,tries,success)
    forceMessage = 0
  EndIf

  If TimeIntoInterval(1,sendInterval*lowPowerDelay,min) Then
    tries = 0
    Call senddatatoiridium(numvals,tries,success)
  EndIf

  If TimeIntoInterval(3,5,min) Then
    'If too  many tries just skip this transmission
    If (tries > 20) Then
      success = 1
    EndIf
    If (success = 0) Then
      Call senddatatoiridium(numvals,tries,success)
    EndIf
  EndIf
NextScan
EndProg
